#!/usr/bin/env node

var chalk = require('chalk');
var exists = require('fs').existsSync;
var format = require('util').format;
var indent = require('indent');
var Hermes = require('..');
var program = require('commander');
var resolve = require('path').resolve;
var repl = require('../lib/repl');

/**
 * Program.
 */

program._name = 'hermes';

program
  .version(require('../package.json').version)
  .option('-r, --repl', 'run hermes with the repl adapter', false)
  .parse(process.argv);

/**
 * Padding.
 */

console.log();
process.on('exit', function(){ console.log(); });

/**
 * Config.
 */

var config = resolve('hermes.json');
if (!exists(config)) fatal('Could not find configuration file at %s', config);

try {
  var json = require(config);
  var name = json.name;
  var template = json.template;
  var plugins = json.plugins || {};
} catch (e) {
  fatal(e);
}

/**
 * Hermes.
 */

var hermes = Hermes();
if (json.name) hermes.name(json.name);
if (json.nickname) hermes.nickname(json.nickname);
if (json.template) hermes.template(json.template);

/**
 * Plugins.
 */

Object.keys(plugins).forEach(function(name){
  var options = plugins[name];
  var plugin = req(name);
  hermes.use(plugin(options));
});

if (program.repl) hermes.use(repl());

/**
 * Connect.
 */

hermes.connect();

/**
 * Require a module by `str` safely. This can be either a local path to a module
 * or a global.
 *
 * @param {String} str
 * @return {Mixed}
 */

function req(str){
  if ('.' == str.charAt(0)) str = resolve(str); // local paths
  try {
    return require(str);
  } catch (e) {
    fatal(e);
  }
}

/**
 * Log a formatted `msg`.
 *
 * @param {String} msg
 * @param {Mixed} args...
 */

function log(msg){
  msg = format.apply(null, arguments);
  console.log(chalk.italic.white('   Hermes'), chalk.gray('·'), msg);
}

/**
 * Log a fatal, formatted error `msg` and exit.
 *
 * @param {String or Error} msg
 * @param {Mixed} args...
 */

function fatal(msg){
  if (msg instanceof Error) msg = msg.message + '\n\n' + indent(msg.stack, 12);
  msg = format.apply(null, arguments);
  console.error(chalk.italic.red('   Hermes'), chalk.gray('·'), msg);
  process.exit(1);
}